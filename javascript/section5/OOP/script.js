/**
 * OOP
 *
 * Object-oriented programming
 *
 * 객체지향 프로그래밍은 Java 및 C++를 비롯한 많은 프로그래밍 언어의 기본이 되는 프로그래밍 패러다임이다.
 *
 * 객체지향 프로그래밍은 여러개의 독립된 단위 "객체" 들의 모임으로 컴퓨터 프로그램을 파악한다.
 * 즉, 객체지향 프로그래밍은 객체들의 모임이다.
 *
 * 객체지향 프로그래밍이 나오기 이전에는 명령어의 목록을 나열(절챠 지향)하는 기능 구현을 목적으로 작성했지만
 * 이렇게 코드를 길게 작성하다 보면 매우 알아보기 힘든 복잡한 코드가 만들어진다.
 * 그래서 하나의 문제를 해결을 위한 독립된 단위인 객체로 만들었으며 이 객체로 인해 알아보기 쉽고 재사용성이 높아졌다.
 */

class Car {
  // 여러 메서드를 정의할 수 있다.
  constructor() {}
  method1() {}
  method2() {}
  method3() {}
}

// OOP 특징

// 1. 자료 추상화

// 불필요한 정보는 숨기고 중요한 정보만을 표현함으로 프로그램을 간단하게 만든다.
// 객체 안에 자세한 내용을 몰라도 중요 정보를 이용하여 해당 객체를 사용할 수 있게 된다.

// 2. 상속

// 새로운 클래스가 기존의 클래스의 자료와 연산을 이용할 수 있게 하는 기능이다.
// 상속을 받는 새로운 클래스를 부클래스, 파생 클래스, 하위 클래스, 자식 클래스라고도 일컫으며
// 새로운 클래스가 상속하는 기존의 클래스를 기반 클래스, 상위 클래스, 부모 클래스 라고도 한다.
// 상속을 통해 기존의 클래스를 상속받은 하위 클래스를 이용해 프로그램의 요구사항에 맞추어 클래스를 수정할 수 있고
// 클래스 간의 종속 관계를 형성함으로써 객체를 조직화할 수 있다.

// 3. 다형성 (Polymorphism)

// poly(많은) morph(형태) => 다양한 형태를 가질 수 있다.
// 어떠한 한 요소에 여러 개념을 넣어놓을 수 있다는 개념
// 객체의 변수나 메서드가 상황에 따라 다른 의미로 해석될 수 있다.
// 오버 라이딩(Overriding)을 사용하여 자식 클래스의 메서드가 부모 클래스의 메서드와 다르게 동작하거나
// 변수가 다른 값으로 지정될 수 있다.

// 4. 캡슐화

// 클래스 안에 관련 메서드, 변수 등을 하나로 묶어준다.
// 해당 매커니즘을 이용하여 바깥에서의 접근을 막아 보안이 강화되고 관리하기 쉬운 코드 제공이 가능하다.
